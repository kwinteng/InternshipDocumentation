#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# This file writes the data that check_mk uses to display the monitor
import imp, sys

try:
    imp.find_module('requests')
    found = True
except:
    print "<<<check_mk>>>"
    print "Error: Python module: requests not installed"
    exit (0)

try:
    imp.find_module('json')
    found = True
except:
    print "<<<check_mk>>>"
    print "Error: Python module: json not installed"
    exit (0)

import requests, json

# Takes valid authorization token and gets the entire data structure from the
# Nest API.

if len(sys.argv) < 2:
    sys.exit('Usage: %s access_token' % sys.argv[0])

token = str(sys.argv[1])
payload = {'auth': token}

r = requests.get("https://developer-api.nest.com/", params=payload)

if r.status_code == 401:
    print "<<<check_mk>>>"
    print "Error: Unauthorized, verify Access Token"
    exit (0)

if r.status_code != 200:
    print "<<<check_mk>>>"
    print r.riase_for_status()
    exit (0)

# Create data object from JSON
# Then print each section parsed my check_mk checks of the same name

data = json.loads(r.text)

# check_mk - format is key: value (note the :)

print "<<<check_mk>>>"
print "Version: 1.1"
print "AgentOs: Nest RESTful API"

# nest - General Nest information - blank now, will populate with API status
# such as 400 or 500 messages

print "<<<nest>>>"
# nest_thermostat - Informational only content, no WARN or CRIT values

print "<<<nest_thermostat>>>"
for devices in data['devices']['thermostats']:
    print "[" + data['devices']['thermostats'][devices]['name_long'].replace(" ", "_") + "]"
    print "software_version " + \
         data['devices']['thermostats'][devices]['software_version']
    print "unique_id " + \
         devices

    if data['devices']['thermostats'][devices]['is_online']:
        print "is_online true"
    else:
        print "is_online false"

    if data['devices']['thermostats'][devices]['has_leaf']:
        print "has_leaf true"
    else:
        print "has_leaf false"


# nest_temp - Most recent ambient temperatue and scale, on the Nest website,
#             the user prefers to view (F or C)
#             nest_temp only uses the Celsius value (the wato default). Scale
#             can be changed by user per thermostat

print "<<<nest_temp>>>"
for devices in data['devices']['thermostats']:
    print "[" + data['devices']['thermostats'][devices]['name_long'].replace(" ", "_") + "]"
    print "temperature_scale " + \
         data['devices']['thermostats'][devices]['temperature_scale']
    print "ambient_temperature_f %f" % \
         data['devices']['thermostats'][devices]['ambient_temperature_f']
    print "ambient_temperature_c %f" % \
         data['devices']['thermostats'][devices]['ambient_temperature_c']

# nest_humidity - Most recent relative humidity reading from the thermostat

print "<<<nest_humidity>>>"
for devices in data['devices']['thermostats']:
    print "[" + data['devices']['thermostats'][devices]['name_long'].replace(" ", "_") + "]"
    print "humidity %d" % \
         data['devices']['thermostats'][devices]['humidity']
		 
# nest_smoke_co_alarm - Most recent relative reading from the smoke alarms (battery health and online status)
print "<<<nest_smoke_co_alarm>>>"
for devices in data['devices']['smoke_co_alarms']:
    print "[" + data['devices']['smoke_co_alarms'][devices]['name_long'].replace(" ", "_") + "]"
    print "battery_health " + \
    data['devices']['smoke_co_alarms'][devices]['battery_health']
    if data['devices']['smoke_co_alarms'][devices]['is_online']:
        print "is_online true"
    else:
        print "is_online false"

# nest_smoke - Most recent relative reading from the smoke alarms
print "<<<nest_smoke>>>"
for devices in data['devices']['smoke_co_alarms']:
    print "[" + data['devices']['smoke_co_alarms'][devices]['name_long'].replace(" ", "_") + "]"
    print "smoke_alarm_state " + \
    data['devices']['smoke_co_alarms'][devices]['smoke_alarm_state']

# nest_co - Most recent relative reading from the co alarms
print "<<<nest_co>>>"
for devices in data['devices']['smoke_co_alarms']:
    print "[" + data['devices']['smoke_co_alarms'][devices]['name_long'].replace(" ", "_") + "]"
    print "co_alarm_state " + \
    data['devices']['smoke_co_alarms'][devices]['co_alarm_state']

# nest_structure - Displays the structure information (Name, country, postal code and away status
print "<<<nest_structure>>>"
for structures in data['structures']:
    name = "Structure" + "_" + data['structures'][structures]['name'] + "_" + data['structures'][structures]['postal_code'] + "_" + data['structures'][structures]['country_code']
    print "[" + name.replace(" ", "_") + "]"
    print "name " + data['structures'][structures]['name']
    print "postal_code " + data['structures'][structures]['postal_code']
    print "country_code " + data['structures'][structures]['country_code']

# Check if the structure is on away status

    if data['structures'][structures]['away'] == "away":
        print "is_away true"
    else:
        print "is_away false"

exit (0)