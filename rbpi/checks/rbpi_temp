#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2014 Adams Technology Consulting
#          Gavin Adams <me@gavinadams.org>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Pulls values from the <<<rbpi_device>>> section of the special agent
# "agent_rbpi" in the same checks directory

# Creates temperature checks for all reported devices

# Default values are set at "reasonable" extremes for comfortable temperatures
# in celcius. If these are overwritten in Wato, we corect based on the
# temperature scale

rbpi_temp_default_levels = (0.0, 15.55, 26.7, 32.2, "C")

def rbpi_temp_parse(info):
    devices = {}
    name = "RBPi"
    device = {}
    devices[name] = device
    for line in info:
        key, value = line
        if key in ["rbpiTemperature", "rbpiHumidity" ]:
            value = float(value)
        device[key] = value
    return devices

def inventory_rbpi_temp(info):
    devices = rbpi_temp_parse(info)
    return [ (name, {}, "rbpi_temp_default_levels") for name in devices ]

def check_rbpi_temp(item, params, info):

    critlow, warnlow, warnhigh, crithigh, tempscale = params

    # set warn and crit as both values, low and high, separated by colon
    # perfdata and PNP4Nagios should pick this up

    # Based on tempscale, need to convert F to C

    if tempscale == "F":
        warnlow = (warnlow - 32.0)/1.8
        warnhigh = (warnhigh - 32.0)/1.8
        critlow = (critlow - 32.0)/1.8
        crithigh = (crithigh - 32.0)/1.8

    warn = "%f:%f" % (warnlow, warnhigh)
    crit = "%f:%f" % (critlow, crithigh)

    # Process inventory for datasource check
    devices = rbpi_temp_parse(info)
    device = devices[item]

    infotext = ""

    # All values are stored internally as Celsius values, then we use the tempscale
    # for the friendly text (and hopefully for pnp4nagios to display in the correct
    # scale

    if tempscale == "C":
        temp = float(device["rbpiTemperature"])
        infotext += "%.2f Â°C" % temp
        # 10 and 35 are for the RRD graph min/max - need to change to Wato
        perfdata = [ ("temp", temp, warn, crit, 10, 35) ]

    if temp <= critlow or temp >= crithigh:
        return (2, "CRITICAL - Temperature is %s" % infotext, perfdata)
    if temp <= warnlow or temp >= warnhigh:
        return (1, "WARNING - Temperature is %s" % infotext, perfdata)
    else:
        return (0, "OK - Temperature is %s" % infotext, perfdata)

check_info["rbpi_temp"] = {
    'check_function':        check_rbpi_temp,
    'inventory_function':    inventory_rbpi_temp,
    'service_description':   'Temperature %s',
    'group':                 'rbpi_temp',
    'has_perfdata':          True,
}
