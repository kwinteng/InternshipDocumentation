#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2014 Adams Technology Consulting
#          Gavin Adams <me@gavinadams.org>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Pulls values from the <<<rbpi_smoke>>> section of the special agent
# "agent_rbpi" in the same checks directory

# Creates smoke checks for all reported devices

# Default is 50% smoke. Like the temperature, warning and critical
# values are 10% and 15% beyond the default

rbpi_smoke_default_levels = (0, 1, 400, 600)


def rbpi_smoke_parse(info):
    devices = {}
    name = "RBPi"
    device = {}
    devices[name] = device
    for line in info:
        key, value = line
        if key in ["rbpiSmoke","rbpiDensity" ]:
            value = float(value)			
            device[key] = value
    return devices

def inventory_rbpi_smoke(info):
    devices = rbpi_smoke_parse(info)
    return [ (name, {}, "rbpi_smoke_default_levels") for name in devices ]

def check_rbpi_smoke(item, params, info):

    critlow, warnlow, warnhigh, crithigh = params

    # set warn and crit as both values, low and high, separated by colon
    # perfdata and PNP4Nagios should pick this up

    warn = "%d:%d" % (warnlow, warnhigh)
    crit = "%d:%d" % (critlow, crithigh)
    
    # Process inventory for datasource check
    devices = rbpi_smoke_parse(info)
    device = devices[item]
    
    infotext = ""
    smoke = 0

    smoke = float(device["rbpiSmoke"])
    perfdata = [ ("smoke", smoke, warn, crit) ]

    if smoke >= crithigh:
        return (2, "CRITICAL - Smoke detected - move to fresh air", perfdata)
    if smoke >= warnhigh:
        return (1, "WARNING - Smoke detected", perfdata)
    else:
        return (0, "OK - Smoke is OK", perfdata)

check_info["rbpi_smoke"] = {
    'check_function':        check_rbpi_smoke,
    'inventory_function':    inventory_rbpi_smoke,
    'service_description':   'Smoke %s',
    'group':                 'rbpi_smoke',
    'has_perfdata':          True,
}


